#!/usr/bin/env python2

PACKAGE = "Vision"
# The following line should not be here for Groovy and above
import roslib;roslib.load_manifest(PACKAGE)

# For Groovy and above, the following line should be
# from dynamic_reconfigure.parameter_generator_catkin import *
from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

gen.add("debug_mode",  int_t, 0, "Debug Mode",   0, 0, 1)

#Params for color blob detection
gen.add("hueLow",  int_t, 0, "Hue Low",   39, 0, 180)
gen.add("hueHigh", int_t, 0, "Hue High", 63, 0, 180)
gen.add("satLow",  int_t, 0, "Sat Low",    90, 0, 255)
gen.add("satHigh", int_t, 0, "Sat High", 159, 0, 255)
gen.add("valLow",  int_t, 0, "Val Low",    0, 0, 255)
gen.add("valHigh", int_t, 0, "Val High", 255, 0, 255)

#Params for morphological ops. To remove noise and join up blobs tgt
gen.add("closeiter", int_t, 0, "Close", 1, 0, 5)
gen.add("openiter", int_t, 0, "Open", 0, 0, 5)

#Params to reject contours that we do not want; helps to ignore noise created by morphing ops
gen.add("conArea", int_t, 0, "conArea", 400, 0, 1000)
gen.add("conPeri", int_t, 0, "conPeri", 400, 0, 1000)
gen.add("aspectRatio", int_t, 0, "aspectRatio", 2, 0, 100)

#Params to test for quality of detection. Reject if we don't have at least 'targetLockHistoryThresh' number of positives, and if the std dev of the X and Y points are too spread out;
gen.add("targetLockHistoryThresh", int_t, 0, "targetLockHistoryThresh", 30, 0, 500)
gen.add("XstdDevThresh", int_t, 0, "XstdDevThresh", 20, 0, 200)
gen.add("YstdDevThresh", int_t, 0, "YstdDevThresh", 20, 0, 200)

#Params to control movement of vehicle
    #thresholds for vehicle to adjust to when in approach phase
gen.add("side_thresh", int_t, 0, "side_thresh", 100, 0, 200)
gen.add("depth_thresh", int_t, 0, "depth_thresh", 100, 0, 200)
    #Distance to move when vehicle is aligned
gen.add("approachFwdDist", double_t, 0, "approachFwdDist", 1, 0, 10)
    #Primary way of detecting distance of vehicle to target is via area. If below approach area thresh, vehicle is still far allow for more time to adjust before sending the next goal
gen.add("area_thresh", int_t, 0, "area_thresh", 18000, 0, 50000)
gen.add("approach_area_thresh", int_t, 0, "approach_area_thresh", 1000, 0, 50000)
    #Gains with which to adjust with
gen.add("side_Kp", double_t, 0, "side_Kp", 0.01, 0, 0.5)
gen.add("depth_Kp", double_t, 0, "depth_Kp", 0.001, 0, 0.5)
    #allowable timings for vehicle to adjust its position. Less time means the task will keep pre-empting action server with new goals. 
gen.add("approachWaitTime", int_t, 0, "approachWaitTime", 5, 0, 10)
gen.add("finalWaitTime", int_t, 0, "finalWaitTime", 1, 0, 10)
gen.add("final_depthchange", double_t, 0, "final_depthchange", 0.8, 0, 10)
gen.add("final_moonwalk", double_t, 0, "final_moonwalk", 1.5, 0, 10)

exit(gen.generate(PACKAGE, "Parking", "Parking"))

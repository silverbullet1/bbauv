/* Auto-generated by genmsg_cpp for file /home/gohew/fuerte_workspace/bbauv/ros_bbauv2012/bbauv_msgs/srv/PID.srv */
#ifndef BBAUV_MSGS_SERVICE_PID_H
#define BBAUV_MSGS_SERVICE_PID_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace bbauv_msgs
{
template <class ContainerAllocator>
struct PIDRequest_ {
  typedef PIDRequest_<ContainerAllocator> Type;

  PIDRequest_()
  : gain_p(0.0)
  , gain_i(0.0)
  , gain_d(0.0)
  , current_val(0.0)
  , target_val(0.0)
  , previous_error(0.0)
  , previous_integrator_val(0.0)
  , integral_term_min(0.0)
  , integral_term_max(0.0)
  , dt(0.0)
  {
  }

  PIDRequest_(const ContainerAllocator& _alloc)
  : gain_p(0.0)
  , gain_i(0.0)
  , gain_d(0.0)
  , current_val(0.0)
  , target_val(0.0)
  , previous_error(0.0)
  , previous_integrator_val(0.0)
  , integral_term_min(0.0)
  , integral_term_max(0.0)
  , dt(0.0)
  {
  }

  typedef double _gain_p_type;
  double gain_p;

  typedef double _gain_i_type;
  double gain_i;

  typedef double _gain_d_type;
  double gain_d;

  typedef double _current_val_type;
  double current_val;

  typedef double _target_val_type;
  double target_val;

  typedef double _previous_error_type;
  double previous_error;

  typedef double _previous_integrator_val_type;
  double previous_integrator_val;

  typedef double _integral_term_min_type;
  double integral_term_min;

  typedef double _integral_term_max_type;
  double integral_term_max;

  typedef double _dt_type;
  double dt;


  typedef boost::shared_ptr< ::bbauv_msgs::PIDRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bbauv_msgs::PIDRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PIDRequest
typedef  ::bbauv_msgs::PIDRequest_<std::allocator<void> > PIDRequest;

typedef boost::shared_ptr< ::bbauv_msgs::PIDRequest> PIDRequestPtr;
typedef boost::shared_ptr< ::bbauv_msgs::PIDRequest const> PIDRequestConstPtr;


template <class ContainerAllocator>
struct PIDResponse_ {
  typedef PIDResponse_<ContainerAllocator> Type;

  PIDResponse_()
  : current_integrator_val(0.0)
  , current_error(0.0)
  , u(0.0)
  {
  }

  PIDResponse_(const ContainerAllocator& _alloc)
  : current_integrator_val(0.0)
  , current_error(0.0)
  , u(0.0)
  {
  }

  typedef double _current_integrator_val_type;
  double current_integrator_val;

  typedef double _current_error_type;
  double current_error;

  typedef double _u_type;
  double u;


  typedef boost::shared_ptr< ::bbauv_msgs::PIDResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bbauv_msgs::PIDResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PIDResponse
typedef  ::bbauv_msgs::PIDResponse_<std::allocator<void> > PIDResponse;

typedef boost::shared_ptr< ::bbauv_msgs::PIDResponse> PIDResponsePtr;
typedef boost::shared_ptr< ::bbauv_msgs::PIDResponse const> PIDResponseConstPtr;

struct PID
{

typedef PIDRequest Request;
typedef PIDResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct PID
} // namespace bbauv_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::bbauv_msgs::PIDRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::bbauv_msgs::PIDRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::bbauv_msgs::PIDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4d3f19ad468f6225a1cf11a4c82adf57";
  }

  static const char* value(const  ::bbauv_msgs::PIDRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4d3f19ad468f6225ULL;
  static const uint64_t static_value2 = 0xa1cf11a4c82adf57ULL;
};

template<class ContainerAllocator>
struct DataType< ::bbauv_msgs::PIDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bbauv_msgs/PIDRequest";
  }

  static const char* value(const  ::bbauv_msgs::PIDRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::bbauv_msgs::PIDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 gain_p\n\
float64 gain_i\n\
float64 gain_d\n\
float64 current_val\n\
float64 target_val\n\
float64 previous_error\n\
float64 previous_integrator_val\n\
float64 integral_term_min\n\
float64 integral_term_max\n\
float64 dt\n\
\n\
";
  }

  static const char* value(const  ::bbauv_msgs::PIDRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::bbauv_msgs::PIDRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::bbauv_msgs::PIDResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::bbauv_msgs::PIDResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::bbauv_msgs::PIDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "12d2a7003b0a8e0851c9897028086206";
  }

  static const char* value(const  ::bbauv_msgs::PIDResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x12d2a7003b0a8e08ULL;
  static const uint64_t static_value2 = 0x51c9897028086206ULL;
};

template<class ContainerAllocator>
struct DataType< ::bbauv_msgs::PIDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bbauv_msgs/PIDResponse";
  }

  static const char* value(const  ::bbauv_msgs::PIDResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::bbauv_msgs::PIDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 current_integrator_val\n\
float64 current_error\n\
float64 u\n\
\n\
\n\
";
  }

  static const char* value(const  ::bbauv_msgs::PIDResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::bbauv_msgs::PIDResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::bbauv_msgs::PIDRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.gain_p);
    stream.next(m.gain_i);
    stream.next(m.gain_d);
    stream.next(m.current_val);
    stream.next(m.target_val);
    stream.next(m.previous_error);
    stream.next(m.previous_integrator_val);
    stream.next(m.integral_term_min);
    stream.next(m.integral_term_max);
    stream.next(m.dt);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PIDRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::bbauv_msgs::PIDResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.current_integrator_val);
    stream.next(m.current_error);
    stream.next(m.u);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PIDResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<bbauv_msgs::PID> {
  static const char* value() 
  {
    return "bb075cbccfb9d07e9bc04cf20b78a3d2";
  }

  static const char* value(const bbauv_msgs::PID&) { return value(); } 
};

template<>
struct DataType<bbauv_msgs::PID> {
  static const char* value() 
  {
    return "bbauv_msgs/PID";
  }

  static const char* value(const bbauv_msgs::PID&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<bbauv_msgs::PIDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bb075cbccfb9d07e9bc04cf20b78a3d2";
  }

  static const char* value(const bbauv_msgs::PIDRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<bbauv_msgs::PIDRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bbauv_msgs/PID";
  }

  static const char* value(const bbauv_msgs::PIDRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<bbauv_msgs::PIDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bb075cbccfb9d07e9bc04cf20b78a3d2";
  }

  static const char* value(const bbauv_msgs::PIDResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<bbauv_msgs::PIDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bbauv_msgs/PID";
  }

  static const char* value(const bbauv_msgs::PIDResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // BBAUV_MSGS_SERVICE_PID_H


#!/usr/bin/env python
PACKAGE = "PID_Controller"

import roslib;roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

gen.add("navigation", bool_t, 0, "Manual-0 or Auto-1", False)
gen.add("depth_PID", bool_t, 0, "Manual-0 or Auto-1", False)
gen.add("heading_PID", bool_t, 0, "Manual-0 or Auto-1", False)
gen.add("forward_PID", bool_t, 0, "Manual-0 or Auto-1", False)
gen.add("sidemove_PID", bool_t, 0, "Manual-0 or Auto-1", False)
gen.add("pitch_PID", bool_t, 0, "Manual-0 or Auto-1", False)
gen.add("teleop", bool_t, 0, "Manual-0 or Auto-1", True)
gen.add("topside", bool_t, 0, "Manual-0 or Auto-1", True)
gen.add("hovermode", bool_t, 0, "Manual-0 or Auto-1", False)

gen.add("depth_setpoint", double_t, 0, "Setpoint for depth controller", 0, 0, 5)
gen.add("heading_setpoint", double_t, 0, "Setpoint for heading controller", 0, 0, 360)
gen.add("forward_setpoint", double_t, 0, "Setpoint for forward controller", 0, -1000, 1000)
gen.add("sidemove_setpoint", double_t, 0, "Setpoint for sidemove controller", 0, -1000, 1000)
gen.add("pitch_setpoint", double_t, 0, "Setpoint for pitch controller", 0, 150, 250)

gen.add("depth_offset", double_t, 0, "Place vehicle at sea level first and record offset value", 0, -1, 1500)
gen.add("depth_Kp", double_t, 0, "P const for depth controller", 8500, 0, 50000)
gen.add("depth_Ti", double_t, 0, "I const for depth controller", 8500, 0, 50000)
gen.add("depth_Td", double_t, 0, "D const for depth controller", 1000, 0, 50000)
gen.add("depth_min", int_t, 0, "Actuator Min for Depth controller", -2400, -3268, 3268)
gen.add("depth_max", int_t, 0, "Actuator Max for Depth controller", 2400, -3268, 3268)
gen.add("thruster5_ratio", double_t, 0, "Thruster 5 Ratio", 1, 0, 2)
gen.add("thruster6_ratio", double_t, 0, "Thruster 6 Ratio", 1, 0, 2)

gen.add("pitch_Kp", double_t, 0, "P const for pitch controller", 25, 0, 50000)
gen.add("pitch_Ti", double_t, 0, "I const for pitch controller", 0, 0, 50000)
gen.add("pitch_Td", double_t, 0, "D const for pitch controller", 30, 0, 50000)
gen.add("pitch_min", int_t, 0, "Actuator Min for Pitch controller", -800, -3268, 3268)
gen.add("pitch_max", int_t, 0, "Actuator Max for Pitch controller",800, -3268, 3268)

gen.add("heading_Kp", double_t, 0, "P const for heading controller", 50, 0, 10000)
gen.add("heading_Ti", double_t, 0, "I const for heading controller", 0, 0, 100000)
gen.add("heading_Td", double_t, 0, "D const for heading controller", 40, 0, 10000)
gen.add("heading_min", int_t, 0, "Actuator Min for Heading controller", -800, -3260, 3260)
gen.add("heading_max", int_t, 0, "Actuator Max for Heading controller", 800, -3268, 3268)

gen.add("forward_Kp", double_t, 0, "P const for forward controller", 3000, 0, 100000)
gen.add("forward_Ti", double_t, 0, "I const for forward controller", 0, 0, 10000)
gen.add("forward_Td", double_t, 0, "D const for forward controller", 1500, 0, 10000)
gen.add("forward_min", int_t, 0, "Actuator Min for Forward controller", -1600, -3268, 3268)
gen.add("forward_max", int_t, 0, "Actuator Max for Forward controller", 1600, -3268, 3268)

gen.add("sidemove_Kp", double_t, 0, "P const for sidemove controller", 5000, 0, 100000)
gen.add("sidemove_Ti", double_t, 0, "I const for sidemove controller", 0, 0, 10000)
gen.add("sidemove_Td", double_t, 0, "D const for sidemove controller", 1300, 0, 10000)
gen.add("sidemove_min", int_t, 0, "Actuator Min for Sway controller", -800, -3268, 3268)
gen.add("sidemove_max", int_t, 0, "Actuator Max for Sway controller", 800, -3268, 3268)

exit(gen.generate(PACKAGE, "PID_Controller", "PID_Controller"))
